// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tukangk3tik/aksara/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/tukangk3tik/aksara/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/tukangk3tik/aksara/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ClearLOVs mocks base method.
func (m *MockStore) ClearLOVs(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLOVs", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLOVs indicates an expected call of ClearLOVs.
func (mr *MockStoreMockRecorder) ClearLOVs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLOVs", reflect.TypeOf((*MockStore)(nil).ClearLOVs), ctx)
}

// ClearOffices mocks base method.
func (m *MockStore) ClearOffices(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearOffices", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearOffices indicates an expected call of ClearOffices.
func (mr *MockStoreMockRecorder) ClearOffices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOffices", reflect.TypeOf((*MockStore)(nil).ClearOffices), ctx)
}

// ClearSchools mocks base method.
func (m *MockStore) ClearSchools(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSchools", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSchools indicates an expected call of ClearSchools.
func (mr *MockStoreMockRecorder) ClearSchools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSchools", reflect.TypeOf((*MockStore)(nil).ClearSchools), ctx)
}

// ClearUserRoles mocks base method.
func (m *MockStore) ClearUserRoles(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserRoles", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserRoles indicates an expected call of ClearUserRoles.
func (mr *MockStoreMockRecorder) ClearUserRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserRoles", reflect.TypeOf((*MockStore)(nil).ClearUserRoles), ctx)
}

// ClearUsers mocks base method.
func (m *MockStore) ClearUsers(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUsers", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUsers indicates an expected call of ClearUsers.
func (mr *MockStoreMockRecorder) ClearUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUsers", reflect.TypeOf((*MockStore)(nil).ClearUsers), ctx)
}

// CreateLov mocks base method.
func (m *MockStore) CreateLov(ctx context.Context, arg *db.CreateLovParams) (db.Lovs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLov", ctx, arg)
	ret0, _ := ret[0].(db.Lovs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLov indicates an expected call of CreateLov.
func (mr *MockStoreMockRecorder) CreateLov(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLov", reflect.TypeOf((*MockStore)(nil).CreateLov), ctx, arg)
}

// CreateOffice mocks base method.
func (m *MockStore) CreateOffice(ctx context.Context, arg *db.CreateOfficeParams) (db.Offices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffice", ctx, arg)
	ret0, _ := ret[0].(db.Offices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockStoreMockRecorder) CreateOffice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockStore)(nil).CreateOffice), ctx, arg)
}

// CreateSchool mocks base method.
func (m *MockStore) CreateSchool(ctx context.Context, arg *db.CreateSchoolParams) (db.Schools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchool", ctx, arg)
	ret0, _ := ret[0].(db.Schools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchool indicates an expected call of CreateSchool.
func (mr *MockStoreMockRecorder) CreateSchool(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchool", reflect.TypeOf((*MockStore)(nil).CreateSchool), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg *db.CreateUserParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserRole mocks base method.
func (m *MockStore) CreateUserRole(ctx context.Context, arg *db.CreateUserRoleParams) (db.UserRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRole", ctx, arg)
	ret0, _ := ret[0].(db.UserRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRole indicates an expected call of CreateUserRole.
func (mr *MockStoreMockRecorder) CreateUserRole(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRole", reflect.TypeOf((*MockStore)(nil).CreateUserRole), ctx, arg)
}

// DeleteLov mocks base method.
func (m *MockStore) DeleteLov(ctx context.Context, id int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLov", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLov indicates an expected call of DeleteLov.
func (mr *MockStoreMockRecorder) DeleteLov(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLov", reflect.TypeOf((*MockStore)(nil).DeleteLov), ctx, id)
}

// DeleteOffice mocks base method.
func (m *MockStore) DeleteOffice(ctx context.Context, id int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffice", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOffice indicates an expected call of DeleteOffice.
func (mr *MockStoreMockRecorder) DeleteOffice(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffice", reflect.TypeOf((*MockStore)(nil).DeleteOffice), ctx, id)
}

// DeleteSchool mocks base method.
func (m *MockStore) DeleteSchool(ctx context.Context, id int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchool", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchool indicates an expected call of DeleteSchool.
func (mr *MockStoreMockRecorder) DeleteSchool(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchool", reflect.TypeOf((*MockStore)(nil).DeleteSchool), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// DeleteUserRole mocks base method.
func (m *MockStore) DeleteUserRole(ctx context.Context, id int32) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRole", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockStoreMockRecorder) DeleteUserRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockStore)(nil).DeleteUserRole), ctx, id)
}

// GetLovById mocks base method.
func (m *MockStore) GetLovById(ctx context.Context, id int64) (db.Lovs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLovById", ctx, id)
	ret0, _ := ret[0].(db.Lovs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLovById indicates an expected call of GetLovById.
func (mr *MockStoreMockRecorder) GetLovById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLovById", reflect.TypeOf((*MockStore)(nil).GetLovById), ctx, id)
}

// GetLovByParamKey mocks base method.
func (m *MockStore) GetLovByParamKey(ctx context.Context, paramKey string) (db.Lovs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLovByParamKey", ctx, paramKey)
	ret0, _ := ret[0].(db.Lovs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLovByParamKey indicates an expected call of GetLovByParamKey.
func (mr *MockStoreMockRecorder) GetLovByParamKey(ctx, paramKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLovByParamKey", reflect.TypeOf((*MockStore)(nil).GetLovByParamKey), ctx, paramKey)
}

// GetOfficeById mocks base method.
func (m *MockStore) GetOfficeById(ctx context.Context, id int64) (db.GetOfficeByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeById", ctx, id)
	ret0, _ := ret[0].(db.GetOfficeByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeById indicates an expected call of GetOfficeById.
func (mr *MockStoreMockRecorder) GetOfficeById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeById", reflect.TypeOf((*MockStore)(nil).GetOfficeById), ctx, id)
}

// GetSchoolById mocks base method.
func (m *MockStore) GetSchoolById(ctx context.Context, id int64) (db.GetSchoolByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolById", ctx, id)
	ret0, _ := ret[0].(db.GetSchoolByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolById indicates an expected call of GetSchoolById.
func (mr *MockStoreMockRecorder) GetSchoolById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolById", reflect.TypeOf((*MockStore)(nil).GetSchoolById), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(ctx context.Context, id int64) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), ctx, id)
}

// GetUserRoleById mocks base method.
func (m *MockStore) GetUserRoleById(ctx context.Context, id int32) (db.UserRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleById", ctx, id)
	ret0, _ := ret[0].(db.UserRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleById indicates an expected call of GetUserRoleById.
func (mr *MockStoreMockRecorder) GetUserRoleById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleById", reflect.TypeOf((*MockStore)(nil).GetUserRoleById), ctx, id)
}

// ListAllLovs mocks base method.
func (m *MockStore) ListAllLovs(ctx context.Context, arg *db.ListAllLovsParams) ([]db.Lovs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllLovs", ctx, arg)
	ret0, _ := ret[0].([]db.Lovs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllLovs indicates an expected call of ListAllLovs.
func (mr *MockStoreMockRecorder) ListAllLovs(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllLovs", reflect.TypeOf((*MockStore)(nil).ListAllLovs), ctx, arg)
}

// ListAllOffices mocks base method.
func (m *MockStore) ListAllOffices(ctx context.Context, arg *db.ListAllOfficesParams) ([]db.ListAllOfficesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllOffices", ctx, arg)
	ret0, _ := ret[0].([]db.ListAllOfficesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllOffices indicates an expected call of ListAllOffices.
func (mr *MockStoreMockRecorder) ListAllOffices(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllOffices", reflect.TypeOf((*MockStore)(nil).ListAllOffices), ctx, arg)
}

// ListAllSchools mocks base method.
func (m *MockStore) ListAllSchools(ctx context.Context, arg *db.ListAllSchoolsParams) ([]db.ListAllSchoolsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllSchools", ctx, arg)
	ret0, _ := ret[0].([]db.ListAllSchoolsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllSchools indicates an expected call of ListAllSchools.
func (mr *MockStoreMockRecorder) ListAllSchools(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllSchools", reflect.TypeOf((*MockStore)(nil).ListAllSchools), ctx, arg)
}

// ListAllUserRoles mocks base method.
func (m *MockStore) ListAllUserRoles(ctx context.Context, arg *db.ListAllUserRolesParams) ([]db.UserRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllUserRoles", ctx, arg)
	ret0, _ := ret[0].([]db.UserRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllUserRoles indicates an expected call of ListAllUserRoles.
func (mr *MockStoreMockRecorder) ListAllUserRoles(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllUserRoles", reflect.TypeOf((*MockStore)(nil).ListAllUserRoles), ctx, arg)
}

// ListAllUsers mocks base method.
func (m *MockStore) ListAllUsers(ctx context.Context, arg *db.ListAllUsersParams) ([]db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllUsers", ctx, arg)
	ret0, _ := ret[0].([]db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllUsers indicates an expected call of ListAllUsers.
func (mr *MockStoreMockRecorder) ListAllUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllUsers", reflect.TypeOf((*MockStore)(nil).ListAllUsers), ctx, arg)
}

// ListLovByGroupKey mocks base method.
func (m *MockStore) ListLovByGroupKey(ctx context.Context, arg *db.ListLovByGroupKeyParams) ([]db.Lovs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLovByGroupKey", ctx, arg)
	ret0, _ := ret[0].([]db.Lovs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLovByGroupKey indicates an expected call of ListLovByGroupKey.
func (mr *MockStoreMockRecorder) ListLovByGroupKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLovByGroupKey", reflect.TypeOf((*MockStore)(nil).ListLovByGroupKey), ctx, arg)
}

// ListOfficesWithFilters mocks base method.
func (m *MockStore) ListOfficesWithFilters(ctx context.Context, arg *db.ListOfficesWithFiltersParams) ([]db.ListOfficesWithFiltersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfficesWithFilters", ctx, arg)
	ret0, _ := ret[0].([]db.ListOfficesWithFiltersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfficesWithFilters indicates an expected call of ListOfficesWithFilters.
func (mr *MockStoreMockRecorder) ListOfficesWithFilters(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfficesWithFilters", reflect.TypeOf((*MockStore)(nil).ListOfficesWithFilters), ctx, arg)
}

// ListSchoolsByDistrict mocks base method.
func (m *MockStore) ListSchoolsByDistrict(ctx context.Context, arg *db.ListSchoolsByDistrictParams) ([]db.Schools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchoolsByDistrict", ctx, arg)
	ret0, _ := ret[0].([]db.Schools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchoolsByDistrict indicates an expected call of ListSchoolsByDistrict.
func (mr *MockStoreMockRecorder) ListSchoolsByDistrict(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchoolsByDistrict", reflect.TypeOf((*MockStore)(nil).ListSchoolsByDistrict), ctx, arg)
}

// ListSchoolsByOffice mocks base method.
func (m *MockStore) ListSchoolsByOffice(ctx context.Context, arg *db.ListSchoolsByOfficeParams) ([]db.Schools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchoolsByOffice", ctx, arg)
	ret0, _ := ret[0].([]db.Schools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchoolsByOffice indicates an expected call of ListSchoolsByOffice.
func (mr *MockStoreMockRecorder) ListSchoolsByOffice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchoolsByOffice", reflect.TypeOf((*MockStore)(nil).ListSchoolsByOffice), ctx, arg)
}

// ListSchoolsByProvince mocks base method.
func (m *MockStore) ListSchoolsByProvince(ctx context.Context, arg *db.ListSchoolsByProvinceParams) ([]db.Schools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchoolsByProvince", ctx, arg)
	ret0, _ := ret[0].([]db.Schools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchoolsByProvince indicates an expected call of ListSchoolsByProvince.
func (mr *MockStoreMockRecorder) ListSchoolsByProvince(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchoolsByProvince", reflect.TypeOf((*MockStore)(nil).ListSchoolsByProvince), ctx, arg)
}

// ListSchoolsByRegency mocks base method.
func (m *MockStore) ListSchoolsByRegency(ctx context.Context, arg *db.ListSchoolsByRegencyParams) ([]db.Schools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchoolsByRegency", ctx, arg)
	ret0, _ := ret[0].([]db.Schools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchoolsByRegency indicates an expected call of ListSchoolsByRegency.
func (mr *MockStoreMockRecorder) ListSchoolsByRegency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchoolsByRegency", reflect.TypeOf((*MockStore)(nil).ListSchoolsByRegency), ctx, arg)
}

// LocationDistrictByRegency mocks base method.
func (m *MockStore) LocationDistrictByRegency(ctx context.Context, arg *db.LocationDistrictByRegencyParams) ([]db.LocDistricts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationDistrictByRegency", ctx, arg)
	ret0, _ := ret[0].([]db.LocDistricts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationDistrictByRegency indicates an expected call of LocationDistrictByRegency.
func (mr *MockStoreMockRecorder) LocationDistrictByRegency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationDistrictByRegency", reflect.TypeOf((*MockStore)(nil).LocationDistrictByRegency), ctx, arg)
}

// LocationProvince mocks base method.
func (m *MockStore) LocationProvince(ctx context.Context, arg *db.LocationProvinceParams) ([]db.LocProvinces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationProvince", ctx, arg)
	ret0, _ := ret[0].([]db.LocProvinces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationProvince indicates an expected call of LocationProvince.
func (mr *MockStoreMockRecorder) LocationProvince(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationProvince", reflect.TypeOf((*MockStore)(nil).LocationProvince), ctx, arg)
}

// LocationRegencyByProvince mocks base method.
func (m *MockStore) LocationRegencyByProvince(ctx context.Context, arg *db.LocationRegencyByProvinceParams) ([]db.LocRegencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationRegencyByProvince", ctx, arg)
	ret0, _ := ret[0].([]db.LocRegencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationRegencyByProvince indicates an expected call of LocationRegencyByProvince.
func (mr *MockStoreMockRecorder) LocationRegencyByProvince(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationRegencyByProvince", reflect.TypeOf((*MockStore)(nil).LocationRegencyByProvince), ctx, arg)
}

// TotalListAllLovs mocks base method.
func (m *MockStore) TotalListAllLovs(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListAllLovs", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalListAllLovs indicates an expected call of TotalListAllLovs.
func (mr *MockStoreMockRecorder) TotalListAllLovs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListAllLovs", reflect.TypeOf((*MockStore)(nil).TotalListAllLovs), ctx)
}

// TotalListAllOffices mocks base method.
func (m *MockStore) TotalListAllOffices(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListAllOffices", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalListAllOffices indicates an expected call of TotalListAllOffices.
func (mr *MockStoreMockRecorder) TotalListAllOffices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListAllOffices", reflect.TypeOf((*MockStore)(nil).TotalListAllOffices), ctx)
}

// TotalListAllSchools mocks base method.
func (m *MockStore) TotalListAllSchools(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListAllSchools", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalListAllSchools indicates an expected call of TotalListAllSchools.
func (mr *MockStoreMockRecorder) TotalListAllSchools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListAllSchools", reflect.TypeOf((*MockStore)(nil).TotalListAllSchools), ctx)
}

// TotalListAllUsers mocks base method.
func (m *MockStore) TotalListAllUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListAllUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalListAllUsers indicates an expected call of TotalListAllUsers.
func (mr *MockStoreMockRecorder) TotalListAllUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListAllUsers", reflect.TypeOf((*MockStore)(nil).TotalListAllUsers), ctx)
}

// TotalListLovByGroupKey mocks base method.
func (m *MockStore) TotalListLovByGroupKey(ctx context.Context, arg *db.TotalListLovByGroupKeyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListLovByGroupKey", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalListLovByGroupKey indicates an expected call of TotalListLovByGroupKey.
func (mr *MockStoreMockRecorder) TotalListLovByGroupKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListLovByGroupKey", reflect.TypeOf((*MockStore)(nil).TotalListLovByGroupKey), ctx, arg)
}

// TotalListOfficesWithFilters mocks base method.
func (m *MockStore) TotalListOfficesWithFilters(ctx context.Context, arg *db.TotalListOfficesWithFiltersParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListOfficesWithFilters", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalListOfficesWithFilters indicates an expected call of TotalListOfficesWithFilters.
func (mr *MockStoreMockRecorder) TotalListOfficesWithFilters(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListOfficesWithFilters", reflect.TypeOf((*MockStore)(nil).TotalListOfficesWithFilters), ctx, arg)
}

// UpdateLov mocks base method.
func (m *MockStore) UpdateLov(ctx context.Context, arg *db.UpdateLovParams) (db.Lovs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLov", ctx, arg)
	ret0, _ := ret[0].(db.Lovs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLov indicates an expected call of UpdateLov.
func (mr *MockStoreMockRecorder) UpdateLov(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLov", reflect.TypeOf((*MockStore)(nil).UpdateLov), ctx, arg)
}

// UpdateOffice mocks base method.
func (m *MockStore) UpdateOffice(ctx context.Context, arg *db.UpdateOfficeParams) (db.Offices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffice", ctx, arg)
	ret0, _ := ret[0].(db.Offices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffice indicates an expected call of UpdateOffice.
func (mr *MockStoreMockRecorder) UpdateOffice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffice", reflect.TypeOf((*MockStore)(nil).UpdateOffice), ctx, arg)
}

// UpdateSchool mocks base method.
func (m *MockStore) UpdateSchool(ctx context.Context, arg *db.UpdateSchoolParams) (db.Schools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchool", ctx, arg)
	ret0, _ := ret[0].(db.Schools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchool indicates an expected call of UpdateSchool.
func (mr *MockStoreMockRecorder) UpdateSchool(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchool", reflect.TypeOf((*MockStore)(nil).UpdateSchool), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg *db.UpdateUserParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}
