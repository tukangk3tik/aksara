// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: school.sql

package db

import (
	"context"
	"database/sql"
)

const createSchool = `-- name: CreateSchool :one
INSERT INTO schools (
  code,
  name,
  is_public_school,
  office_id,
  province_id,
  regency_id,
  district_id,
  email,
  phone,
  address,
  logo_url,
  created_by
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at
`

type CreateSchoolParams struct {
	Code           string         `json:"code"`
	Name           string         `json:"name"`
	IsPublicSchool bool           `json:"is_public_school"`
	OfficeID       sql.NullInt64  `json:"office_id"`
	ProvinceID     int32          `json:"province_id"`
	RegencyID      int32          `json:"regency_id"`
	DistrictID     int32          `json:"district_id"`
	Email          sql.NullString `json:"email"`
	Phone          sql.NullString `json:"phone"`
	Address        sql.NullString `json:"address"`
	LogoUrl        sql.NullString `json:"logo_url"`
	CreatedBy      int64          `json:"created_by"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg *CreateSchoolParams) (Schools, error) {
	row := q.db.QueryRowContext(ctx, createSchool,
		arg.Code,
		arg.Name,
		arg.IsPublicSchool,
		arg.OfficeID,
		arg.ProvinceID,
		arg.RegencyID,
		arg.DistrictID,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.LogoUrl,
		arg.CreatedBy,
	)
	var i Schools
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsPublicSchool,
		&i.OfficeID,
		&i.ProvinceID,
		&i.RegencyID,
		&i.DistrictID,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.LogoUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :execresult
UPDATE schools
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
AND deleted_at IS NULL
RETURNING id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteSchool(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSchool, id)
}

const getSchoolById = `-- name: GetSchoolById :one
SELECT a.id, a.code, a.name, a.is_public_school, a.office_id, a.province_id, a.regency_id, 
a.district_id, a.email, a.phone, a.address, a.logo_url, a.created_by, 
b.name as office, c.name as province, d.name as regency, e.name as district,
a.created_at, a.updated_at
FROM schools a
JOIN offices b ON a.office_id = b.id
JOIN loc_provinces c ON a.province_id = c.id
JOIN loc_regencies d ON a.regency_id = d.id
LEFT JOIN loc_districts e ON a.district_id = e.id
WHERE a.deleted_at IS NULL 
AND a.id = $1
`

type GetSchoolByIdRow struct {
	ID             int64          `json:"id"`
	Code           string         `json:"code"`
	Name           string         `json:"name"`
	IsPublicSchool bool           `json:"is_public_school"`
	OfficeID       sql.NullInt64  `json:"office_id"`
	ProvinceID     int32          `json:"province_id"`
	RegencyID      int32          `json:"regency_id"`
	DistrictID     int32          `json:"district_id"`
	Email          sql.NullString `json:"email"`
	Phone          sql.NullString `json:"phone"`
	Address        sql.NullString `json:"address"`
	LogoUrl        sql.NullString `json:"logo_url"`
	CreatedBy      int64          `json:"created_by"`
	Office         string         `json:"office"`
	Province       string         `json:"province"`
	Regency        string         `json:"regency"`
	District       sql.NullString `json:"district"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetSchoolById(ctx context.Context, id int64) (GetSchoolByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getSchoolById, id)
	var i GetSchoolByIdRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsPublicSchool,
		&i.OfficeID,
		&i.ProvinceID,
		&i.RegencyID,
		&i.DistrictID,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.LogoUrl,
		&i.CreatedBy,
		&i.Office,
		&i.Province,
		&i.Regency,
		&i.District,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllSchools = `-- name: ListAllSchools :many
SELECT a.id, a.code, a.name, a.is_public_school, a.office_id, a.province_id, a.regency_id, a.district_id, a.email, a.phone, a.address, a.logo_url, a.created_by, b.name as office, c.name as province, d.name as regency, e.name as district 
FROM schools a
JOIN offices b ON a.office_id = b.id
JOIN loc_provinces c ON a.province_id = c.id
JOIN loc_regencies d ON a.regency_id = d.id
LEFT JOIN loc_districts e ON a.district_id = e.id
WHERE a.deleted_at IS NULL 
ORDER BY a.id
LIMIT $1 OFFSET $2
`

type ListAllSchoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAllSchoolsRow struct {
	ID             int64          `json:"id"`
	Code           string         `json:"code"`
	Name           string         `json:"name"`
	IsPublicSchool bool           `json:"is_public_school"`
	OfficeID       sql.NullInt64  `json:"office_id"`
	ProvinceID     int32          `json:"province_id"`
	RegencyID      int32          `json:"regency_id"`
	DistrictID     int32          `json:"district_id"`
	Email          sql.NullString `json:"email"`
	Phone          sql.NullString `json:"phone"`
	Address        sql.NullString `json:"address"`
	LogoUrl        sql.NullString `json:"logo_url"`
	CreatedBy      int64          `json:"created_by"`
	Office         string         `json:"office"`
	Province       string         `json:"province"`
	Regency        string         `json:"regency"`
	District       sql.NullString `json:"district"`
}

func (q *Queries) ListAllSchools(ctx context.Context, arg *ListAllSchoolsParams) ([]ListAllSchoolsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllSchools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllSchoolsRow
	for rows.Next() {
		var i ListAllSchoolsRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsPublicSchool,
			&i.OfficeID,
			&i.ProvinceID,
			&i.RegencyID,
			&i.DistrictID,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.LogoUrl,
			&i.CreatedBy,
			&i.Office,
			&i.Province,
			&i.Regency,
			&i.District,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchoolsByDistrict = `-- name: ListSchoolsByDistrict :many
SELECT id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at FROM schools
WHERE deleted_at IS NULL
AND district_id = $1 
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListSchoolsByDistrictParams struct {
	DistrictID int32 `json:"district_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListSchoolsByDistrict(ctx context.Context, arg *ListSchoolsByDistrictParams) ([]Schools, error) {
	rows, err := q.db.QueryContext(ctx, listSchoolsByDistrict, arg.DistrictID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schools
	for rows.Next() {
		var i Schools
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsPublicSchool,
			&i.OfficeID,
			&i.ProvinceID,
			&i.RegencyID,
			&i.DistrictID,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.LogoUrl,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchoolsByOffice = `-- name: ListSchoolsByOffice :many
SELECT id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at FROM schools
WHERE deleted_at IS NULL
AND office_id = $1 
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListSchoolsByOfficeParams struct {
	OfficeID sql.NullInt64 `json:"office_id"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) ListSchoolsByOffice(ctx context.Context, arg *ListSchoolsByOfficeParams) ([]Schools, error) {
	rows, err := q.db.QueryContext(ctx, listSchoolsByOffice, arg.OfficeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schools
	for rows.Next() {
		var i Schools
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsPublicSchool,
			&i.OfficeID,
			&i.ProvinceID,
			&i.RegencyID,
			&i.DistrictID,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.LogoUrl,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchoolsByProvince = `-- name: ListSchoolsByProvince :many
SELECT id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at FROM schools
WHERE deleted_at IS NULL
AND province_id = $1 
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListSchoolsByProvinceParams struct {
	ProvinceID int32 `json:"province_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListSchoolsByProvince(ctx context.Context, arg *ListSchoolsByProvinceParams) ([]Schools, error) {
	rows, err := q.db.QueryContext(ctx, listSchoolsByProvince, arg.ProvinceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schools
	for rows.Next() {
		var i Schools
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsPublicSchool,
			&i.OfficeID,
			&i.ProvinceID,
			&i.RegencyID,
			&i.DistrictID,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.LogoUrl,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchoolsByRegency = `-- name: ListSchoolsByRegency :many
SELECT id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at FROM schools
WHERE deleted_at IS NULL
AND regency_id = $1 
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListSchoolsByRegencyParams struct {
	RegencyID int32 `json:"regency_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListSchoolsByRegency(ctx context.Context, arg *ListSchoolsByRegencyParams) ([]Schools, error) {
	rows, err := q.db.QueryContext(ctx, listSchoolsByRegency, arg.RegencyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schools
	for rows.Next() {
		var i Schools
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsPublicSchool,
			&i.OfficeID,
			&i.ProvinceID,
			&i.RegencyID,
			&i.DistrictID,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.LogoUrl,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalListAllSchools = `-- name: TotalListAllSchools :one
SELECT COUNT(*) as total_items FROM schools
WHERE deleted_at IS NULL
`

func (q *Queries) TotalListAllSchools(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, totalListAllSchools)
	var total_items int64
	err := row.Scan(&total_items)
	return total_items, err
}

const updateSchool = `-- name: UpdateSchool :one
UPDATE schools
SET name = $1,
  office_id = $2,
  province_id = $3,
  regency_id = $4,
  district_id = $5,
  email = $6,
  phone = $7,
  address = $8,
  logo_url = $9,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $10  
AND deleted_at IS NULL
RETURNING id, code, name, is_public_school, office_id, province_id, regency_id, district_id, email, phone, address, logo_url, created_by, created_at, updated_at, deleted_at
`

type UpdateSchoolParams struct {
	Name       string         `json:"name"`
	OfficeID   sql.NullInt64  `json:"office_id"`
	ProvinceID int32          `json:"province_id"`
	RegencyID  int32          `json:"regency_id"`
	DistrictID int32          `json:"district_id"`
	Email      sql.NullString `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Address    sql.NullString `json:"address"`
	LogoUrl    sql.NullString `json:"logo_url"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg *UpdateSchoolParams) (Schools, error) {
	row := q.db.QueryRowContext(ctx, updateSchool,
		arg.Name,
		arg.OfficeID,
		arg.ProvinceID,
		arg.RegencyID,
		arg.DistrictID,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.LogoUrl,
		arg.ID,
	)
	var i Schools
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsPublicSchool,
		&i.OfficeID,
		&i.ProvinceID,
		&i.RegencyID,
		&i.DistrictID,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.LogoUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
