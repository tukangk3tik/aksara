// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  id,
  name,
  fullname,
  email,
  password,
  user_role_id,
  office_id,
  school_id
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID         uint64         `json:"id"`
	Name       string         `json:"name"`
	Fullname   string         `json:"fullname"`
	Email      string         `json:"email"`
	Password   string         `json:"password"`
	UserRoleID sql.NullString `json:"user_role_id"`
	OfficeID   sql.NullInt64  `json:"office_id"`
	SchoolID   sql.NullInt64  `json:"school_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Fullname,
		arg.Email,
		arg.Password,
		arg.UserRoleID,
		arg.OfficeID,
		arg.SchoolID,
	)
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users 
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password FROM users
WHERE email = ? LIMIT 1
`

type GetUserByEmailRow struct {
	ID       uint64 `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, fullname, email, password, user_role_id, office_id, school_id, is_super_admin, created_at, updated_at, deleted_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Fullname,
		&i.Email,
		&i.Password,
		&i.UserRoleID,
		&i.OfficeID,
		&i.SchoolID,
		&i.IsSuperAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
