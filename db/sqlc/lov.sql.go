// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: lov.sql

package db

import (
	"context"
	"database/sql"
)

const createLov = `-- name: CreateLov :one
INSERT INTO lovs (
  group_key,
  param_key,
  param_description,
  parent_id
) VALUES ($1, $2, $3, $4)
RETURNING id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at
`

type CreateLovParams struct {
	GroupKey         string        `json:"group_key"`
	ParamKey         string        `json:"param_key"`
	ParamDescription string        `json:"param_description"`
	ParentID         sql.NullInt64 `json:"parent_id"`
}

func (q *Queries) CreateLov(ctx context.Context, arg *CreateLovParams) (Lovs, error) {
	row := q.db.QueryRowContext(ctx, createLov,
		arg.GroupKey,
		arg.ParamKey,
		arg.ParamDescription,
		arg.ParentID,
	)
	var i Lovs
	err := row.Scan(
		&i.ID,
		&i.GroupKey,
		&i.ParamKey,
		&i.ParamDescription,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteLov = `-- name: DeleteLov :execresult
UPDATE lovs 
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
AND deleted_at IS NULL
RETURNING id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteLov(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteLov, id)
}

const getLovById = `-- name: GetLovById :one
SELECT id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at FROM lovs
WHERE id = $1 
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetLovById(ctx context.Context, id int64) (Lovs, error) {
	row := q.db.QueryRowContext(ctx, getLovById, id)
	var i Lovs
	err := row.Scan(
		&i.ID,
		&i.GroupKey,
		&i.ParamKey,
		&i.ParamDescription,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getLovByParamKey = `-- name: GetLovByParamKey :one
SELECT id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at FROM lovs
WHERE param_key = $1 
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetLovByParamKey(ctx context.Context, paramKey string) (Lovs, error) {
	row := q.db.QueryRowContext(ctx, getLovByParamKey, paramKey)
	var i Lovs
	err := row.Scan(
		&i.ID,
		&i.GroupKey,
		&i.ParamKey,
		&i.ParamDescription,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllLovs = `-- name: ListAllLovs :many
SELECT id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at FROM lovs
WHERE deleted_at IS NULL 
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAllLovsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllLovs(ctx context.Context, arg *ListAllLovsParams) ([]Lovs, error) {
	rows, err := q.db.QueryContext(ctx, listAllLovs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lovs
	for rows.Next() {
		var i Lovs
		if err := rows.Scan(
			&i.ID,
			&i.GroupKey,
			&i.ParamKey,
			&i.ParamDescription,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLovByGroupKey = `-- name: ListLovByGroupKey :many
SELECT id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at FROM lovs
WHERE group_key = $1
AND (($4::text IS NULL OR param_key ILIKE '%' || $4 || '%')
OR ($5::text IS NULL OR param_description ILIKE '%' || $5 || '%'))
AND deleted_at IS NULL
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListLovByGroupKeyParams struct {
	GroupKey         string         `json:"group_key"`
	Limit            int32          `json:"limit"`
	Offset           int32          `json:"offset"`
	ParamKey         sql.NullString `json:"param_key"`
	ParamDescription sql.NullString `json:"param_description"`
}

func (q *Queries) ListLovByGroupKey(ctx context.Context, arg *ListLovByGroupKeyParams) ([]Lovs, error) {
	rows, err := q.db.QueryContext(ctx, listLovByGroupKey,
		arg.GroupKey,
		arg.Limit,
		arg.Offset,
		arg.ParamKey,
		arg.ParamDescription,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lovs
	for rows.Next() {
		var i Lovs
		if err := rows.Scan(
			&i.ID,
			&i.GroupKey,
			&i.ParamKey,
			&i.ParamDescription,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalListAllLovs = `-- name: TotalListAllLovs :one
SELECT COUNT(*) as total_items FROM lovs
WHERE deleted_at IS NULL
`

func (q *Queries) TotalListAllLovs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, totalListAllLovs)
	var total_items int64
	err := row.Scan(&total_items)
	return total_items, err
}

const totalListLovByGroupKey = `-- name: TotalListLovByGroupKey :one
SELECT COUNT(*) as total_items FROM lovs
WHERE group_key = $1 
AND (($2::text IS NULL OR param_key ILIKE '%' || $2 || '%')
OR ($3::text IS NULL OR param_description ILIKE '%' || $3 || '%'))
AND deleted_at IS NULL
`

type TotalListLovByGroupKeyParams struct {
	GroupKey         string         `json:"group_key"`
	ParamKey         sql.NullString `json:"param_key"`
	ParamDescription sql.NullString `json:"param_description"`
}

func (q *Queries) TotalListLovByGroupKey(ctx context.Context, arg *TotalListLovByGroupKeyParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, totalListLovByGroupKey, arg.GroupKey, arg.ParamKey, arg.ParamDescription)
	var total_items int64
	err := row.Scan(&total_items)
	return total_items, err
}

const updateLov = `-- name: UpdateLov :one
UPDATE lovs 
SET group_key = $1,
  param_key = $2,
  param_description = $3,
  parent_id = $4,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $5
AND deleted_at IS NULL
RETURNING id, group_key, param_key, param_description, parent_id, created_at, updated_at, deleted_at
`

type UpdateLovParams struct {
	GroupKey         string        `json:"group_key"`
	ParamKey         string        `json:"param_key"`
	ParamDescription string        `json:"param_description"`
	ParentID         sql.NullInt64 `json:"parent_id"`
	ID               int64         `json:"id"`
}

func (q *Queries) UpdateLov(ctx context.Context, arg *UpdateLovParams) (Lovs, error) {
	row := q.db.QueryRowContext(ctx, updateLov,
		arg.GroupKey,
		arg.ParamKey,
		arg.ParamDescription,
		arg.ParentID,
		arg.ID,
	)
	var i Lovs
	err := row.Scan(
		&i.ID,
		&i.GroupKey,
		&i.ParamKey,
		&i.ParamDescription,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
