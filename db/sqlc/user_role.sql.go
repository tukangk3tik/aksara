// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_role.sql

package db

import (
	"context"
	"database/sql"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (
  name
) VALUES ($1)
RETURNING id, name, created_at, updated_at, deleted_at
`

func (q *Queries) CreateUserRole(ctx context.Context, name string) (UserRoles, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, name)
	var i UserRoles
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :execresult
UPDATE user_roles 
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
AND deleted_at IS NULL
RETURNING id, name, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteUserRole(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserRole, id)
}

const getUserRoleById = `-- name: GetUserRoleById :one
SELECT id, name, created_at, updated_at, deleted_at FROM user_roles
WHERE id = $1 
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserRoleById(ctx context.Context, id int32) (UserRoles, error) {
	row := q.db.QueryRowContext(ctx, getUserRoleById, id)
	var i UserRoles
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllUserRoles = `-- name: ListAllUserRoles :many
SELECT id, name, created_at, updated_at, deleted_at FROM user_roles
WHERE deleted_at IS NULL 
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAllUserRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllUserRoles(ctx context.Context, arg *ListAllUserRolesParams) ([]UserRoles, error) {
	rows, err := q.db.QueryContext(ctx, listAllUserRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRoles
	for rows.Next() {
		var i UserRoles
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
