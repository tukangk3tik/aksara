// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: location.sql

package db

import (
	"context"
)

const locationDistrictByRegency = `-- name: LocationDistrictByRegency :many
SELECT id, name, province_id, regency_id FROM loc_districts
WHERE regency_id = $1 
AND name LIKE $2
LIMIT $3 OFFSET $4
`

type LocationDistrictByRegencyParams struct {
	RegencyID int32  `json:"regency_id"`
	Name      string `json:"name"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) LocationDistrictByRegency(ctx context.Context, arg LocationDistrictByRegencyParams) ([]LocDistricts, error) {
	rows, err := q.db.QueryContext(ctx, locationDistrictByRegency,
		arg.RegencyID,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocDistricts
	for rows.Next() {
		var i LocDistricts
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProvinceID,
			&i.RegencyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const locationProvince = `-- name: LocationProvince :many
SELECT id, name FROM loc_provinces 
WHERE name LIKE $1
LIMIT $2 OFFSET $3
`

type LocationProvinceParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) LocationProvince(ctx context.Context, arg LocationProvinceParams) ([]LocProvinces, error) {
	rows, err := q.db.QueryContext(ctx, locationProvince, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocProvinces
	for rows.Next() {
		var i LocProvinces
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const locationRegencyByProvince = `-- name: LocationRegencyByProvince :many
SELECT id, name, province_id FROM loc_regencies 
WHERE province_id = $1 
AND name LIKE $2
LIMIT $3 OFFSET $4
`

type LocationRegencyByProvinceParams struct {
	ProvinceID int32  `json:"province_id"`
	Name       string `json:"name"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) LocationRegencyByProvince(ctx context.Context, arg LocationRegencyByProvinceParams) ([]LocRegencies, error) {
	rows, err := q.db.QueryContext(ctx, locationRegencyByProvince,
		arg.ProvinceID,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocRegencies
	for rows.Next() {
		var i LocRegencies
		if err := rows.Scan(&i.ID, &i.Name, &i.ProvinceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
